""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" P L U G I N S   O P T I O N S
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"========== bufExplorer plugin ==========

let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
map <leader>o :BufExplorer<cr>

"========== Minibuffer plugin ==========

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
"let g:miniBufExplSplitBelow = 1
"let g:miniBufExplUseSingleClick = 1
"let g:miniBufExplVSplit = 25
"let g:miniBufExplorerMoreThanOne = 2

"let g:bufExplorerSortBy = "name"
autocmd BufRead,BufNew :call UMiniBufExplorer
map <leader>u :TMiniBufExplorer<cr>

"========== CloseTag ==========

" Only load CloseTag dealing with html/xml file.
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako so ~/.vim/bundle/closetag.vim/plugin/closetag.vim

"========== Vim grep ==========

let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/bin/grep\ -nH

"==========NERDTree ==========

function! ToggleNERDTree()
    " Detect which plugins are open
    if exists('t:NERDTreeBufName')
        let nerdtree_open = bufwinnr(t:NERDTreeBufName) != -1
    else
        let nerdtree_open = 0
    endif

    " Perform the appropriate action
    if nerdtree_open
        NERDTreeClose
    else
        NERDTree
    endif
endfunction

function! ToggleNERDTreeFind()
    " Detect which plugins are open
    if exists('t:NERDTreeBufName')
        let nerdtree_open = bufwinnr(t:NERDTreeBufName) != -1
    else
        let nerdtree_open = 0
    endif

    " Perform the appropriate action
    if nerdtree_open
        NERDTreeClose
    else
        NERDTreeFind
    endif
endfunction

let NERDTreeShowHidden = 1
" open NERDTree on CWD
" map <leader>f :NERDTreeToggle%:p:h<cr>
map <leader>f :call ToggleNERDTree()<cr>
map <leader>r :call ToggleNERDTreeFind()<cr>

"==========NERDCommenter ==========

let NERDSpaceDelims = 1

"==========Supertab ==========

" Let Supertab work with vim's builtin autocomplete
let g:SuperTabDefaultCompletionType = "context"

"==========Vim Session ==========

" don't restore help windows
set sessionoptions-=help

" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options

" Always persist Vim's window size.
set sessionoptions+=resize

" Also save tabs
set sessionoptions+=tabpages

" The session_directory
let g:session_directory = "~/.vim_session/"

let g:session_autoload = "no"
let g:session_autosave = "no"

" Restore the last used session
let g:session_default_to_last = 1

" vim ruby/rails/rspec/jquery api doc settings
let g:jquery_doc_command='open'
let g:ruby_doc_command='open'

"========== Ctrl-P ==========

" https://github.com/kien/ctrlp.vim
let g:ctrlp_map = '<c-p>'

" Set How Ctrl-P determines the working directory
" 0 - donâ€™t manage working directory.
" 1 - the parent directory of the current file.
" 2 - the nearest ancestor that contains one of these directories or files: .git/ .hg/ .svn/ .bzr/ _darcs/
let g:ctrlp_working_path_mode = 2

" exclude files or directory from search
" with vim script regexp, needs to escape |, + as well
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|node_modules$\|vendor$\|.*cache$',
  \ 'file': '\.exe$\|\.so$\|\.dll$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,.DS_Store " MacOSX/Linux
" use custom file listing command
" let g:ctrlp_user_command = 'find %s -type f'

"========== Zoomwin binding ==========

map <leader>zw :ZoomWin<cr>

"========== Powerline plugin ==========
set laststatus=2
let g:Powerline_colorscheme = 'default'
let g:Powerline_symbols = 'fancy'
"Shows a segment indicating that the current buffer has trailing white spaces.
call Pl#Theme#InsertSegment('ws_marker', 'after', 'lineinfo')

"========== Fugitive ==========
" auto delete the fugitive object buff
autocmd BufReadPost fugitive://* set bufhidden=delete
let g:fugitive_github_domains = ['http://git.zenhacks.org']
let g:fugitive_gitlab_engine = '1'

"========== Dash Interface ==========
nmap <leader>dn :silent !open dash://nodejs:<cword><cr>
nmap <leader>dj :silent !open dash://javascript:<cword><cr>
nmap <leader>drb :silent !open dash://ruby:<cword><cr>
nmap <leader>dra :silent !open dash://rails:<cword><cr>

"========== Use Ag - an Ack Replacement  ==========
let g:ackprg = 'ag --nogroup --nocolor --column'

"========== Use Dbext Profile  ==========
let g:dbext_default_profile_mysql  = 'type=MYSQL:user=yangchenyun:passwd=3CTszAjyDMpBnFtYsf4tFq'
let g:dbext_default_profile = 'mysql'

"========== TagBar  ==========
nmap <F8> :TagbarToggle<cr>
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif

let g:tagbar_type_markdown = {
  \ 'ctagstype' : 'markdown',
  \ 'kinds' : [
    \ 'h:Heading_L1',
    \ 'i:Heading_L2',
    \ 'k:Heading_L3'
  \ ]
\ }

"========== Vim Root  ==========
let g:rooter_patterns = ['tags', 'Rakefile', 'MIT-LICENSE', '.git/', '.travis.yml', 'Gemfile', '*.gemspec']
let g:rooter_use_lcd = 1
